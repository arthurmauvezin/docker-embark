#!/bin/bash

set -euo pipefail

get_usage () {
	cat << EOF
Usage: docker-embark [PATH_TO_DOCKERFILE]...
Build, ship and delete Docker images

  -h, --help 			Print this help
  -k, --keep-images             Keep images instead of deleting it after push
  -b, --build-only              Do not push image after building it

EOF

exit 0

}

docker_embark () {
	if [ ! -f $1/Dockerfile ]; then
	    echo "[ERROR] Dockerfile not found"
	    exit 1
	fi

	repository_line=$(grep REPOSITORIES $1/Dockerfile)
	repositories=${repository_line###REPOSITORIES=}

	tag_line=$(grep TAGS $1/Dockerfile)
	tags=${tag_line###TAGS=}

	if [[ ( -z "$repositories" ) ]]
	then
		echo "[ERROR] No REPOSITORIES tag found in Dockerfile"
		exit 1
	fi

	if [[ ( -z "$tags" ) ]]
	then
		echo "[ERROR] No TAGS tag found in Dockerfile"
		exit 1
	fi

	builded_images=()
	for repository in $(echo $repositories | tr "," "\n")
	do
		for tag in $(echo $tags | tr "," "\n")
		do
			echo $repository:$tag
			docker build -f $1/Dockerfile -t $repository:$tag $1

			if [[ "$3" -eq 0 ]]
			then
				docker push $repository:$tag
			fi
			builded_images+=($repository:$tag)
		done
	done

	if [[ "$2" -eq 0 ]]
        then
		for image in ${builded_images[@]}
		do
			echo $image
			docker rmi $image
		done
	fi
}

KEEPIMAGES=0
BUILDONLY=0
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -k|--keep-images)
    KEEPIMAGES=1
    shift 
    ;;
    -b|--build-only)
    BUILDONLY=1
    shift 
    ;;
    -h|--help)
    get_usage
    ;;
    *)    
    POSITIONAL+=("$1") # save it in an array for later
    shift 
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

echo KEEP IMAGES  = "${KEEPIMAGES}"
echo BUILD ONLY     = "${BUILDONLY}"

if [[ -z $1 ]]; then
    echo "[ERROR] Missing path_to_dockerfile parameter"
    exit 1
fi

while [[ $# -gt 0 ]]
do
	docker_embark $1 $KEEPIMAGES $BUILDONLY
	shift
done

